
================================================================================
File: .\dump_project.py
================================================================================

import os

# Set your project root (current folder)
project_root = "."

# Output file
output_file = "project_dump.txt"

# File extensions to include when dumping all files
include_exts = [".py", ".html", ".css", ".js", ".json", ".txt", ".md"]

# üîß If you want only specific files, list them here by name
# Example: only_files = ["views.py", "urls.py", "login.html"]
only_files = []   # put filenames here

with open(output_file, "w", encoding="utf-8") as outfile:
    for root, dirs, files in os.walk(project_root):
        if "venv" in dirs:
            dirs.remove("venv")
        if "__pycache__" in dirs:
            dirs.remove("__pycache__")

        for file in files:
            # ‚úÖ If only_files is set, include only those filenames
            if only_files and file not in only_files:
                continue

            # Otherwise filter by extension
            if not only_files and not any(file.endswith(ext) for ext in include_exts):
                continue

            filepath = os.path.join(root, file)
            try:
                with open(filepath, "r", encoding="utf-8") as infile:
                    outfile.write(f"\n{'='*80}\n")
                    outfile.write(f"File: {filepath}\n")
                    outfile.write(f"{'='*80}\n\n")
                    outfile.write(infile.read())
                    outfile.write("\n\n")
            except Exception as e:
                outfile.write(f"\n[Could not read {filepath}: {e}]\n")

print(f"‚úÖ File contents saved to {output_file}")
print("‚ÑπÔ∏è  Cleared only_files list after writing.")



================================================================================
File: .\manage.py
================================================================================

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'petrescue.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()



================================================================================
File: .\project_dump.txt
================================================================================




================================================================================
File: .\requirements.txt
================================================================================


[Could not read .\requirements.txt: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte]

================================================================================
File: .\petrescue\asgi.py
================================================================================

"""
ASGI config for petrescue project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'petrescue.settings')

application = get_asgi_application()



================================================================================
File: .\petrescue\settings.py
================================================================================

"""
Django settings for petrescue project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os 
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-45j6)$4tek)sn#--qcqp#wwj22gcro_n-v+hy)xqg+2hj!1wy^'
ADMIN_REGISTRATION_PASSCODE = "FindAPaw!Admin#2025"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig', 
    "rest_framework",
    "corsheaders",
]

MIDDLEWARE = [
   'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'petrescue.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'petrescue.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'petrescue_db',
        'USER': 'root', 
        'PASSWORD': 'root', 
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Media files settings
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# STATIC_ROOT is important for deployment but not strictly for development server.
# If you are planning to deploy, you would uncomment this and run 'python manage.py collectstatic'.
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



================================================================================
File: .\petrescue\urls.py
================================================================================

from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

from users.views import (
    ProfileViewSet, PetReportViewSet, PetForAdoptionViewSet, NotificationViewSet, RegisterView
)
from users import urls as users_html_urls

from rest_framework.routers import DefaultRouter

api_router = DefaultRouter()
api_router.register(r'profiles', ProfileViewSet)
api_router.register(r'petreports', PetReportViewSet)
api_router.register(r'petsforadoption', PetForAdoptionViewSet)
api_router.register(r'notifications', NotificationViewSet)

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(api_router.urls), name='api_root'), 
    path('api/register/', RegisterView.as_view(), name='api_register'),
    path('', include('users.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


================================================================================
File: .\petrescue\wsgi.py
================================================================================

"""
WSGI config for petrescue project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'petrescue.settings')

application = get_wsgi_application()



================================================================================
File: .\petrescue\__init__.py
================================================================================




================================================================================
File: .\static\css\style.css
================================================================================

/* static/css/style.css */

/* --- Basic Reset --- */
* {
 margin: 0;
 padding: 0;
 box-sizing: border-box;
}

/* --- Variables (Design System) --- */
:root {
 --background: hsl(35, 20%, 98%);
 --foreground: hsl(25, 15%, 15%);
 --card: hsl(0, 0%, 100%);
 --card-foreground: hsl(25, 15%, 15%);
 --popover: 0 0% 100%;
 --popover-foreground: 25 15% 15%;
 --primary: hsl(25, 85%, 55%); /* Orange-ish primary */
 --primary-foreground: 0 0% 100%;
 --secondary: hsl(120, 25%, 92%); /* Light green/teal secondary */
 --secondary-foreground: 25 15% 15%;
 --muted: 35 15% 95%;
 --muted-foreground: 25 10% 50%;
 --border: hsl(35, 20%, 90%);
 --input: hsl(35, 20%, 96%);
 --ring: 25 85% 55%;

 /* PurPaws brand colors - using HSL values for flexibility */
 --primary-warm: 25 85% 55%;  /* Warm orange for primary actions */
 --primary-soft: 35 40% 88%;  /* Softer peach/orange for backgrounds */
 --success-green: 120 45% 55%; /* Nice green for success messages */
 --earth-brown: 25 25% 35%;  /* Darker brown/earth tone */
 --accent-purple: 255 40% 55%; /* A nice purple for accents */
 --accent-purple-soft: 255 40% 88%; /* Lighter purple */

 /* Gradients */
 --gradient-warm: linear-gradient(135deg, hsl(var(--primary-warm)), hsl(var(--primary-soft)));
 --gradient-hero: linear-gradient(135deg, hsl(var(--primary-warm) / 0.1), hsl(var(--success-green) / 0.1));

 /* Shadows */
 --shadow-soft: 0 4px 20px hsl(var(--primary-warm) / 0.1);
 --shadow-warm: 0 8px 30px hsl(var(--primary-warm) / 0.15);

 --radius: 0.5rem; /* Default border radius */

 /* Sidebar specific, if needed, otherwise can be removed or adapted */
 --sidebar-background: 0 0% 98%;
 --sidebar-foreground: 240 5.3% 26.1%;
 --sidebar-primary: 240 5.9% 10%;
 --sidebar-primary-foreground: 0 0% 98%;
 --sidebar-accent: 240 4.8% 95.9%;
 --sidebar-accent-foreground: 240 5.9% 10%;
 --sidebar-border: 220 13% 91%;
 --sidebar-ring: 217.2 91.2% 59.8%;
}

/* Tailwind-like directives - If you are actually using Tailwind, this would be processed by its build tool.
 For direct CSS, these are treated as comments or potentially unusual syntax.
 Assuming these are descriptive comments or if they come from a pre-processor like PostCSS.
*/
/* @layer base { */
/* * { @apply border-border; } */
/* body { @apply bg-background text-foreground; } */
/* } */

/* --- General Body Styling --- */
body {
 font-family: 'Quicksand', sans-serif;
 line-height: 1.6;
 color: #333;
 background-color: #f9f9f9; /* Default background for ALL pages */
 min-height: 100vh;
 display: flex;
 flex-direction: column;
 /* REMOVE position: relative; from the general body */
}

/* --- LOGIN PAGE SPECIFIC BACKGROUND --- */
body.login-page-background {
 background-image: url('../images/loginpet.png');
 background-size: cover;
 background-position: center center;
 background-attachment: fixed;
 position: relative; /* Add position: relative; ONLY here */
}

/* Overlay for the login page background */
body.login-page-background::before {
 content: '';
 position: absolute;
 top: 0;
 left: 0;
 right: 0;
 bottom: 0;
 background-color: rgba(0, 0, 0, 0);
 z-index: 0;
}


/* --- REGISTRATION PAGE SPECIFIC BACKGROUND --- */
body.register-page-background {
 background-image: url('../images/registerpet.png'); /* ‚úÖ FIX: Reverted to use the intended separate image */
 background-size: cover;
 background-position: center center;
 background-attachment: fixed;
 position: relative;
}

/* Overlay for the registration page background */
body.register-page-background::before {
 content: '';
 position: absolute;
 top: 0;
 left: 0;
 right: 0;
 bottom: 0;
 background-color: rgba(0, 0, 0, 0.05); /* Slight dark overlay for readability */
 z-index: 0;
}

/* Ensure main content appears ABOVE the overlay for BOTH pages */
body.login-page-background header,
body.login-page-background main,
body.login-page-background footer,
body.register-page-background header,
body.register-page-background main,
body.register-page-background footer {
 position: relative;
 z-index: 1;
}


/* --- You may need to add back a background for headers/footers on OTHER pages --- */
/* If your header and footer look transparent on other pages now, add this: */
header, footer {
 background-color: #ffffff; /* Or var(--card) if you prefer */
}

/* --- Typography --- */
/* Apply cursive font only to h1 tags by default, and to any element with the .cursive-title class */
h1, .cursive-title {
 font-family: 'Pacifico', cursive; /* Cute title font */
 color: var(--primary-warm);
}

.section-title {
 text-align: center;
 margin-bottom: 30px;
 font-size: 2em;
 color: var(--primary-warm);
}

/* --- Layout & Containers --- */
.container {
 width: 90%;
 max-width: 1200px;
 margin: 0 auto;
 padding: 20px 0;
}

/* --- Header --- */
.site-header {
 background-color: var(--card); /* White card background */
 padding: 10px 0;
 box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.site-header .container {
 display: flex;
 justify-content: space-between;
 align-items: center;
}

.logo-full-img {
 height: 85px; /* You can adjust this height to fit your logo's design */
 width: auto; /* This keeps the aspect ratio correct */
 display: block;
 margin-left: -120px; /* Ensures it behaves as a block element within the link */
}
.logo {
 display: flex;
 align-items: center;
 cursor: pointer;
}


.site-header nav ul {
 list-style: none;
 display: flex;
}

.site-header nav a:hover {
 color: rgb(236, 109, 19); /* Change link color on hover */
}

.site-header nav li {
 margin-left: 25px;
}

.site-header nav a {
 text-decoration: none;
 color: var(--muted-foreground); /* Muted color for links */
 font-weight: bold;
 font-size: 1.1em;
 transition: color 0.3s ease;
}



/* --- Main Content Area --- */
main {
 padding-top: 30px;
 flex-grow: 1; /* Allows main to take available space, pushing footer down */
}

/* --- Hero Section (for HomePage, can be adapted) --- */
.hero-section {
 background-color: var(--primary-soft); /* Soft primary color */
 padding: 60px 0;
 display: flex;
 justify-content: space-between;
 align-items: center;
 border-radius: 15px;
 margin-bottom: 40px;
 overflow: hidden;
}

.hero-content {
 flex: 1;
 padding-right: 30px;
}

.hero-content h2 {
 font-size: 3em;
 margin-bottom: 20px;
 color: var(--sidebar-primary); /* Using a darker accent for contrast */
}

.hero-content p {
 font-size: 1.3em;
 margin-bottom: 30px;
 color: var(--foreground);
}

.hero-image img {
 max-width: 100%;
 height: 350px;
 border-radius: 15px;
 object-fit: cover;
}

.hero-actions {
 display: flex;
 gap: 20px;
}

/* --- Buttons --- */
.btn {
 display: inline-block;
 padding: 12px 25px;
 border: none;
 border-radius: var(--radius); /* Using variable for radius */
 text-decoration: none;
 font-weight: bold;
 cursor: pointer;
 transition: all 0.2s ease; /* Transition for hover and active effects */
 font-size: 1.1em;
 box-shadow: var(--shadow-soft); /* Using shadow variable */
}

.btn-primary {
 background: var(--gradient-warm); /* Using gradient variable */
 color: var(--primary-foreground);
}

.btn-primary:hover {
 background: linear-gradient(to right, hsl(25, 85%, 50%), hsl(25, 85%, 50%)); /* Darker gradient on hover */
 transform: translateY(-2px);
 box-shadow: 0 6px 25px hsl(var(--primary-warm) / 0.25); /* Stronger shadow on hover */
}

.btn-primary:active {
 transform: translateY(0); /* Remove transform on click */
 box-shadow: var(--shadow-soft); /* Restore shadow */
}

.btn-secondary {
 background: var(--primary-soft); /* Soft primary background */
 color: var(--primary-warm); /* Warm primary text */
 border: 2px solid var(--primary-warm);
}

.btn-secondary:hover {
 background: hsl(35, 40%, 80%); /* Lighter background on hover */
 border-color: hsl(25, 85%, 50%); /* Darker border on hover */
 transform: translateY(-2px);
}

.btn-secondary:active {
 transform: translateY(0);
 background: hsl(35, 40%, 85%);
}

.btn-small {
 padding: 8px 15px;
 font-size: 0.9em;
}

.btn-full {
 width: 100%;
}

/* --- Pet Cards (for lists) --- */
.featured-pets-section, .dashboard-pets-section { /* Applied to multiple sections */
 margin-bottom: 50px;
 padding: 30px 0;
}

.pet-grid {
 display: grid;
 grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
 gap: 30px;
}

.pet-card {
 position: relative; /* Make it a positioning context for the badge */
 background-color: var(--card); /* Using card color variable */
 border-radius: var(--radius);
 box-shadow: var(--shadow-soft); /* Using soft shadow variable */
 overflow: hidden;
 text-align: center;
 transition: transform 0.3s ease, box-shadow 0.3s ease;
 display: flex;
 flex-direction: column;
}

.pet-card:hover {
 transform: translateY(-5px);
 box-shadow: 0 8px 20px hsl(var(--primary-warm) / 0.12); /* Slightly stronger shadow on hover */
}

.report-type-badge {
 position: absolute;
 top: 10px;
 left: 10px;
 padding: 5px 10px;
 border-radius: 12px;
 font-size: 0.8em;
 font-weight: bold;
 color: white;
 z-index: 1; /* Make sure it's above the image */
 text-transform: uppercase;
 letter-spacing: 0.5px;
 box-shadow: 0 2px 5px rgba(0,0,0,0.2);
}

.report-type-badge.lost {
 background-color: white; /* Change background to white */
 color: var(--foreground);  /* Change text color to dark (black-ish) */
 border: 1px solid var(--border); /* Add a light border to help it stand out */
}

.report-type-badge.found {
 background-color: white; 
 color: var(--foreground);  /* Change text color to dark (black-ish) */
 border: 1px solid var(--border);/* A nice green for 'Found' */
}

.pet-card-img {
 width: 100%;
 height: 200px;
 object-fit: cover;
}

.pet-card-info {
 padding: 15px;
 flex-grow: 1;
 display: flex;
 flex-direction: column;
 justify-content: space-between;
}

.pet-card-info h3 {
 font-family: 'Pacifico', cursive;
 color: var(--foreground); /* Using general foreground color */
 margin-bottom: 10px;
 font-size: 1.6em;
}

.pet-card-info p {
 margin-bottom: 8px;
 color: var(--muted-foreground); /* Muted color for details */
}

.pet-card-info .btn-small {
 margin-top: 15px;
}

/* --- About Section --- */
.about-purpaws-section {
 background-color: var(--accent); /* Using accent for background */
 padding: 50px 0;
 text-align: center;
 border-radius: var(--radius);
 margin-bottom: 40px;
}

.about-content {
 max-width: 800px;
 margin: 0 auto;
}

.about-icon {
 height: 50px;
 width: auto;
 margin-bottom: 20px;
 opacity: 0.7; /* Slightly faded icon */
}

.about-content p {
 font-size: 1.1em;
 color: var(--foreground);
}

/* --- Authentication Forms (Login & Register) --- */
.auth-section {
 display: flex;
 justify-content: center;
 align-items: center;
 padding: 50px 0;
}

.auth-box {
 background: var(--card); /* Using card background variable */
 backdrop-filter: blur(8px); /* Frosted glass effect */
 border: 1px solid var(--border); /* Using border variable */
 border-radius: var(--radius);
 box-shadow: var(--shadow-warm); /* Using shadow variable */
 padding: 40px;
 width: 100%;
 max-width: 450px;
 text-align: center;
}

.auth-title {
 font-size: 2em;
 margin-bottom: 10px;
 color: var(--foreground);
}

.auth-subtitle {
 font-size: 1.1em;
 color: var(--muted-foreground);
 margin-bottom: 30px;
}

.form-group {
 margin-bottom: 20px;
 text-align: left;
}

.form-group label {
 display: block;
 margin-bottom: 8px;
 font-weight: 500; /* Slightly less bold than headings */
 color: var(--foreground);
}

.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="password"],
.form-group input[type="number"],
.form-group input[type="tel"] {
 width: 100%;
 padding: 12px 15px;
 border: 1px solid var(--border); /* Using border variable */
 border-radius: var(--radius);
 background: var(--input); /* Using input background variable */
 color: var(--foreground);
 font-size: 0.875rem;
 outline: none;
 transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.form-group input:focus {
 border-color: var(--primary); /* Primary color on focus */
 box-shadow: 0 0 0 2px hsl(var(--primary) / 0.2); /* Ring effect on focus */
}

.password-rules {
 display: block;
 font-size: 0.8em;
 color: var(--muted-foreground);
 margin-top: 5px;
}

.auth-switch {
 margin-top: 25px;
 font-size: 0.95em;
}

.auth-switch a {
 margin-left: 5px;
 color: var(--primary); /* Primary color for links */
 text-decoration: none;
 font-weight: 500;
}

.auth-switch a:hover {
 text-decoration: underline;
 color: hsl(25, 85%, 50%); /* Darker primary on hover */
}

/* Alerts */
.messages { /* Changed from '.alert' to '.messages' for consistency with Django messages */
 list-style: none;
 padding: 0;
 margin: 20px 0;
}

.messages li {
 padding: 15px;
 margin-bottom: 10px;
 border-radius: var(--radius);
 font-size: 0.9em;
 text-align: center;
 border: 1px solid transparent; /* Base border */
}

/* Specific message type styling (matches Django's default tags) */
.messages li.success {
 background-color: hsl(120, 45%, 90%); /* Soft success green */
 color: hsl(120, 45%, 35%); /* Darker success green text */
 border-color: hsl(120, 45%, 70%);
}

.messages li.error {
 background-color: hsl(0, 62%, 90%); /* Soft error red */
 color: hsl(0, 62%, 30%); /* Darker error red text */
 border-color: hsl(0, 62%, 70%);
}

.messages li.info {
 background-color: hsl(210, 45%, 90%); /* Soft info blue */
 color: hsl(210, 45%, 35%);
 border-color: hsl(210, 45%, 70%);
}

.messages li.warning {
 background-color: hsl(40, 85%, 90%); /* Soft warning yellow */
 color: hsl(40, 85%, 30%);
 border-color: hsl(40, 85%, 70%);
}


/* --- Dashboard Section --- */
.dashboard-section {
 padding: 40px 0;
 background-color: var(--background); /* Light background */
}

.dashboard-section .section-title {
 color: var(--primary-warm); /* Orange title */
 margin-bottom: 40px;
}

.user-info-box {
 background-color: var(--card);
 padding: 30px;
 border-radius: var(--radius);
 box-shadow: var(--shadow-warm);
 margin-bottom: 40px;
 display: flex;
 flex-direction: column;
 align-items: center;
 text-align: center;
}

.user-info-box h3 {
 font-size: 1.8em;
 margin-bottom: 20px;
 color: var(--foreground);
}

.user-info-box p {
 margin-bottom: 10px;
 color: var(--muted-foreground);
 font-size: 1.1em;
}

.user-info-box .profile-pic-large {
 width: 150px;
 height: 150px;
 border-radius: 50%;
 object-fit: cover;
 margin-top: 20px;
 border: 3px solid var(--primary-warm); /* Warm primary border */
}

.dashboard-actions {
 background-color: var(--accent); /* Soft accent color for actions */
 padding: 30px;
 border-radius: var(--radius);
 margin-bottom: 40px;
 text-align: center;
 box-shadow: var(--shadow-soft);
}

.dashboard-actions h2 {
 font-size: 2.2em;
 margin-bottom: 25px;
 color: var(--sidebar-primary); /* Dark accent for heading */
}

.action-buttons {
 display: flex;
 justify-content: center;
 gap: 25px;
 flex-wrap: wrap;
}

.action-buttons .btn {
 min-width: 200px;
 background: var(--gradient-warm); /* Use gradient for primary action buttons */
 color: var(--primary-foreground);
 border: none; /* Ensure no extra border */
}

.action-buttons .btn:hover {
 background: linear-gradient(to right, hsl(25, 85%, 50%), hsl(25, 85%, 50%));
 transform: translateY(-2px);
}

.action-buttons .btn-secondary {
 background: var(--primary-soft);
 color: var(--primary-warm);
 border: 2px solid var(--primary-warm);
}

.action-buttons .btn-secondary:hover {
 background: hsl(35, 40%, 80%);
 border-color: hsl(25, 85%, 50%);
}

.user-reports-box {
 background-color: var(--input); /* Using input background for a lighter box */
 padding: 25px;
 border-radius: var(--radius);
 margin-top: 30px;
}

.user-reports-box h3 {
 font-size: 1.6em;
 margin-bottom: 20px;
 color: var(--foreground);
}

.user-reports-box ul {
 list-style: none;
 padding: 0;
}

.user-reports-box li {
 background-color: var(--card); /* Card background for list items */
 padding: 15px;
 border-radius: var(--radius);
 margin-bottom: 12px;
 box-shadow: var(--shadow-soft);
 display: flex;
 justify-content: space-between;
 align-items: center;
 flex-wrap: wrap;
}

.user-reports-box li strong {
 color: var(--primary-warm); /* Orange for emphasis */
}

.user-reports-box li a {
 color: var(--primary); /* Primary color for links */
 text-decoration: none;
 font-weight: 500;
}

.user-reports-box li a:hover {
 text-decoration: underline;
 color: hsl(25, 85%, 50%); /* Darker primary on hover */
}

/* --- Pets List Section --- */
.featured-pets-section, .dashboard-pets-section {
 margin-bottom: 50px;
 padding: 30px 0;
}

.pets-adoption-section .section-title,
.featured-pets-section .section-title,
.dashboard-pets-section .section-title { /* Applied to multiple sections */
 color: var(--accent-purple); /* Purple for pet section titles */
}

.pet-grid {
 display: grid;
 grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
 gap: 40px; /* Increased gap */
}

.pet-card {
 background-color: var(--card);
 border-radius: var(--radius);
 box-shadow: var(--shadow-soft);
 overflow: hidden;
 text-align: center;
 transition: transform 0.3s ease, box-shadow 0.3s ease;
 display: flex;
 flex-direction: column;
}

.pet-card:hover {
 transform: translateY(-5px);
 box-shadow: 0 8px 20px hsl(var(--primary-warm) / 0.12);
}

.pet-card-img {
 width: 100%;
 height: 200px;
 object-fit: cover;
}

.pet-card-info {
 padding: 15px;
 flex-grow: 1;
 display: flex;
 flex-direction: column;
 justify-content: space-between;
}

.pet-card-info h3 {
 font-family: 'Pacifico', cursive;
 color: var(--foreground);
 margin-bottom: 10px;
 font-size: 1.6em;
}

.pet-card-info p {
 margin-bottom: 8px;
 color: var(--muted-foreground);
}

.pet-card-info .btn-small {
 margin-top: 15px;
}

/* --- Report Pet Form Section --- */
.report-section {
 padding: 40px 0; /* Increased padding */
 display: flex;
 justify-content: center;
 align-items: center;
}

.report-box {
 background: var(--card); /* Using card background */
 backdrop-filter: blur(8px); /* Frosted glass effect */
 border: 1px solid var(--border); /* Using border variable */
 border-radius: var(--radius);
 box-shadow: var(--shadow-warm); /* Using shadow variable */
 padding: 40px;
 width: 100%;
 max-width: 550px;
 text-align: center;
}

.report-box .auth-title {
 font-size: 2em;
 margin-bottom: 10px;
 color: var(--foreground);
}

.report-box .auth-subtitle {
 font-size: 1.1em;
 color: var(--muted-foreground);
 margin-bottom: 30px;
}

/* Re-use form-group and input styling from auth-box */
.report-box .form-group {
 margin-bottom: 20px;
 text-align: left;
}

.report-box label {
 display: block;
 margin-bottom: 8px;
 font-weight: 500;
 color: var(--foreground);
}

.report-box input[type="text"],
.report-box input[type="email"],
.report-box input[type="password"],
.report-box input[type="number"],
.report-box input[type="tel"],
.report-box input[type="file"] {
 width: 100%;
 padding: 12px 15px;
 border: 1px solid var(--border);
 border-radius: var(--radius);
 background: var(--input);
 color: var(--foreground);
 font-size: 0.875rem;
 outline: none;
 transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.report-box input:focus {
 border-color: var(--primary);
 box-shadow: 0 0 0 2px hsl(var(--primary) / 0.2);
}

.report-box input[type="file"] {
 padding-top: 8px;
 padding-bottom: 8px;
}

.report-box small {
 display: block;
 font-size: 0.8em;
 color: var(--muted-foreground);
 margin-top: 5px;
}


/* --- Pet Report Detail Section --- */
.report-detail-section {
 padding: 40px 0;
}

.report-detail-container {
 display: flex;
 flex-wrap: wrap;
 gap: 40px;
 background-color: var(--card);
 padding: 40px;
 border-radius: var(--radius);
 box-shadow: var(--shadow-warm);
}

.report-header {
 text-align: center;
 width: 100%;
 margin-bottom: 30px;
}

.report-header p {
 margin-bottom: 8px;
 font-size: 1.1em;
 color: var(--muted-foreground);
}

.report-header p strong {
 color: var(--primary-warm); /* Orange for emphasis */
}

.report-image-large {
 width: 100%;
 max-width: 400px;
 margin: 0 auto 30px auto;
 text-align: center; /* Center the image */
}

.report-image-large img {
 width: 100%;
 height: 350px;
 object-fit: cover;
 border-radius: var(--radius);
}

.report-details {
 width: 100%;
 text-align: left;
}

.report-details p {
 margin-bottom: 12px;
 font-size: 1.15em;
 color: var(--muted-foreground);
}

.report-details p strong {
 color: var(--accent-purple); /* Purple for detail labels */
}

/* --- Messages Styling --- */
.messages {
 list-style: none;
 padding: 0;
 margin: 20px 0;
}

.messages li {
 padding: 15px;
 margin-bottom: 10px;
 border-radius: var(--radius);
 font-size: 0.9em;
 text-align: center;
 border: 1px solid transparent;
 transition: opacity 0.3s ease;
}

.messages li.success {
 background-color: hsl(120, 45%, 90%);
 color: hsl(120, 45%, 35%);
 border-color: hsl(120, 45%, 70%);
}

.messages li.error {
 background-color: hsl(0, 62%, 90%);
 color: hsl(0, 62%, 30%);
 border-color: hsl(0, 62%, 70%);
}

.messages li.info {
 background-color: hsl(210, 45%, 90%);
 color: hsl(210, 45%, 35%);
 border-color: hsl(210, 45%, 70%);
}

.messages li.warning {
 background-color: hsl(40, 85%, 90%);
 color: hsl(40, 85%, 30%);
 border-color: hsl(40, 85%, 70%);
}


/* Override the curly font for all headings within admin pages */
.admin-dashboard-section h2,
.admin-dashboard-section h3,
.manage-users-section h2,
.manage-users-section h3 {
 font-family: 'Quicksand', sans-serif; /* Use the regular body font */
 font-weight: 700; /* Make it bold to stand out */
}

/* --- Admin Dashboard --- */
.stats-grid {
 display: grid;
 grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
 gap: 20px;
 margin-bottom: 40px;
}
.stat-card {
 background-color: var(--card);
 padding: 25px;
 border-radius: var(--radius);
 text-align: center;
 box-shadow: var(--shadow-soft);
 border: 1px solid var(--border);
}
.stat-card h3 {
 font-size: 0.9em; /* Make the card title a bit smaller */
 color: var(--muted-foreground);
 text-transform: uppercase; /* A common style for stat cards */
 letter-spacing: 1px;
}
.stat-card p {
 font-family: 'Quicksand', sans-serif; /* Also apply to the number itself */
 font-size: 2.8em;
 font-weight: 700;
 color: var(--primary-warm);
 margin-top: 10px;
}
.admin-actions {
 margin-top: 40px;
 padding: 30px;
 background-color: #fdfdfd;
 border: 1px solid var(--border);
 border-radius: var(--radius);
 text-align: center;
}
.admin-actions h3 {
 margin-bottom: 20px;
}

/* --- Manage Users Page --- */
.admin-nav {
 margin-bottom: 20px;
}
.admin-nav a {
 text-decoration: none;
 color: var(--primary);
 font-weight: bold;
}
.admin-nav a:hover {
 text-decoration: underline;
}

.user-table-container {
 overflow-x: auto; /* Allows horizontal scrolling on small screens */
 background-color: var(--card);
 padding: 20px;
 border-radius: var(--radius);
 box-shadow: var(--shadow-soft);
}
table {
 width: 100%;
 border-collapse: collapse;
 margin-top: 20px;
}
th, td {
 padding: 12px 15px;
 border-bottom: 1px solid var(--border); /* Use bottom borders for a cleaner look */
 text-align: left;
 vertical-align: middle;
}
thead th {
 background-color: var(--muted);
 font-family: 'Quicksand', sans-serif;
 font-weight: 700;
 text-transform: uppercase;
 font-size: 0.85em;
 letter-spacing: 0.5px;
}
tbody tr:hover {
 background-color: hsl(var(--primary-warm) / 0.05); /* Subtle hover effect */
}

/* Styling for the action buttons in the table */
.action-cell {
 display: flex;
 gap: 10px;
 align-items: center;
}

.action-form {
 margin: 0;
}

/* Remove Button */
.btn-danger {
 background-color: rgb(231, 76, 60); /* A strong red */
 color: white;
 border: none;
 padding: 6px 12px;
 border-radius: var(--radius);
 cursor: pointer;
 font-size: 0.85em;
 font-weight: bold;
 transition: background-color 0.2s ease; /* Add transition */
}
.btn-danger:hover {
 background-color: rgb(192, 57, 43); /* Darker red on hover */
}

/* Promote Button */
.btn-promote {
 background-color: rgb(231, 76, 60); /* A strong, clear green */
 color: white; /* Explicitly set text color to white */
 border: none;
 padding: 6px 12px;
 border-radius: var(--radius);
 cursor: pointer;
 font-size: 0.85em;
 font-weight: bold;
 transition: background-color 0.2s ease; /* Add transition */
}
.btn-promote:hover {
 background-color: rgb(192, 57,43); /* Darker green on hover */
}
/* Role badges in the user table */
.role-admin {
 background-color: var(--primary-warm);
 color: rgb(0, 0, 0);
 padding: 3px 8px;
 border-radius: 12px;
 font-size: 0.8em;
 font-weight: bold;
}
.role-user {
 background-color: var(--muted);
 color: var(--muted-foreground);
 padding: 3px 8px;
 border-radius: 12px;
 font-size: 0.8em;
 font-weight: bold;
}

/* --- Style for the Admin link in main navigation --- */
.admin-link {
 color: #c0392b !important; /* A distinct red color */
 font-weight: bold;
 position: relative;
}

/* Optional: add a small dot to the admin link */
.admin-link::after {
 content: '';
 position: absolute;
 top: 5px;
 right: -10px;
 width: 6px;
 height: 6px;
 background-color: #c0392b;
 border-radius: 50%;
}
/* --- Responsive Adjustments --- */
@media (max-width: 768px) {
 .site-header .container, .site-footer .container {
  flex-direction: column;
  text-align: center;
 }
 .site-header nav ul {
  flex-direction: column;
  margin-top: 15px;
 }
 .site-header nav li {
  margin: 5px 0;
 }
 .logo {
  margin-bottom: 15px;
 }
 /* Hero section adjustments */
 .hero-section {
  flex-direction: column;
  text-align: center;
  padding: 40px 0;
 }
 .hero-content {
  padding-right: 0;
  margin-bottom: 30px;
 }
 .hero-content h2 {
  font-size: 2.5em; /* Smaller heading on mobile */
 }
 .hero-content p {
  font-size: 1.1em;
 }
 .hero-image img {
  height: 250px; /* Smaller image on mobile */
 }
 .hero-actions {
  flex-direction: column; /* Stack buttons vertically */
  gap: 15px;
  align-items: center;
 }
 .btn {
  width: 80%; /* Make buttons wider */
 }

 /* Pet Cards */
 .pet-grid {
  grid-template-columns: 1fr; /* Stack cards on smaller screens */
 }

 /* Auth and Report Boxes */
 .auth-box, .report-box {
  max-width: 90%;
  padding: 30px;
 }

 /* Social Links */
 .social-links {
  margin-top: 15px;
 }

 /* Dashboard Actions */
 .dashboard-actions h2 {
  font-size: 1.8em;
 }
 .action-buttons {
  flex-direction: column;
  align-items: center;
 }
 .action-buttons .btn {
  width: 80%;
 }

 /* Report Detail Page */
 .report-detail-container {
  flex-direction: column;
  align-items: center;
 }
 .report-image-large {
  max-width: 80%;
 }
 .report-details {
  text-align: center;
 }
}

.about-hero-section h1,
.about-content-section h2 {
 font-family: 'Quicksand', sans-serif; /* Use the regular body font */
 font-weight: 700; /* Make it bold */
}


.about-hero-section {
 background: linear-gradient(rgba(0, 0, 0, 0.618), rgba(0, 0, 0, 0.771)), url('../images/about-hero.jpg');
 background-size: cover;
 background-position: center 30%;
 color: white;
 text-align: center;
 padding: 80px 20px;
 margin-bottom: 50px;
 border-radius: 20px; /* round edges */
 overflow: hidden;
}

.about-hero-section h1 {
 font-size: 3.5em;
 color: white;
 margin-bottom: 10px;
}

.about-hero-section p {
 font-size: 1.7em;
 font-family: 'Quicksand', sans-serif;
 font-weight: 500;
}

.about-content-section {
 max-width: 1000px;
}

.about-mission {
 display: flex;
 align-items: center;
 gap: 40px;
 margin-bottom: 80px;
}

.about-mission .about-text {
 flex: 1;
}

.about-mission .about-text h2 {
 font-size: 2.5em;
 margin-bottom: 20px;
 color: var(--primary-warm);
}

.about-mission .about-text p {
 font-size: 1.1em;
 line-height: 1.7;
 color: var(--muted-foreground);
}

.about-mission .about-image {
 flex: 1;
 max-width: 450px;
}

.about-mission .about-image img {
 width: 100%;
 border-radius: var(--radius);
 box-shadow: var(--shadow-warm);
}

.how-it-works {
 text-align: center;
 margin-bottom: 80px;
}

.steps-container {
 display: grid;
 grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
 gap: 30px;
 margin-top: 40px;
}

.step-card {
 background: var(--card);
 padding: 30px;
 border-radius: var(--radius);
 box-shadow: var(--shadow-soft);
 border-top: 4px solid var(--primary-warm);
 transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.step-card:hover {
 transform: translateY(-10px);
 box-shadow: var(--shadow-warm);
}

.step-card .step-icon {
 font-size: 3em;
 margin-bottom: 15px;
}

.step-card h3 {
 /* The global h3 rule still applies, so we override it here */
 font-family: 'Quicksand', sans-serif;
 font-weight: 700;
 font-size: 1.5em;
 margin-bottom: 15px;
 color: var(--foreground);
}

.step-card p {
 color: var(--muted-foreground);
}

.call-to-action {
 background-color: var(--accent-purple-soft);
 text-align: center;
 padding: 50px 30px;
 border-radius: var(--radius);
}

.call-to-action h2 {
 color: var(--accent-purple);
 font-size: 2.5em;
 margin-bottom: 15px;
}

.call-to-action p {
 margin-bottom: 30px;
 font-size: 1.1em;
 max-width: 600px;
 margin-left: auto;
 margin-right: auto;
}

/* --- Responsive adjustments for About Page --- */
@media (max-width: 768px) {
 .about-hero-section h1 {
  font-size: 2.5em;
 }
 .about-mission {
  flex-direction: column;
 }
}


================================================================================
File: .\static\js\script.js
================================================================================




================================================================================
File: .\users\admin.py
================================================================================

# users/admin.py

from django.contrib import admin
from .models import Profile, PetReport, PetForAdoption, Notification

# These classes customize how the models are displayed in the admin interface.

class PetReportAdmin(admin.ModelAdmin):
    """Customizes the display for PetReport in the admin."""
    list_display = ('id', 'report_type', 'pet_type', 'status', 'reporter', 'date_reported', 'location')
    list_filter = ('status', 'report_type', 'pet_type')
    search_fields = ('location', 'breed', 'reporter__username')
    readonly_fields = ('date_reported',)
    list_per_page = 25

class PetForAdoptionAdmin(admin.ModelAdmin):
    """Customizes the display for PetForAdoption in the admin."""
    list_display = ('name', 'pet_type', 'status', 'lister', 'date_listed')
    list_filter = ('status', 'pet_type', 'gender')
    search_fields = ('name', 'breed', 'lister__username')
    readonly_fields = ('date_listed',)

class ProfileAdmin(admin.ModelAdmin):
    """Customizes the display for user Profiles."""
    list_display = ('user', 'role', 'city', 'phone_number')
    search_fields = ('user__username', 'city')

class NotificationAdmin(admin.ModelAdmin):
    """Customizes the display for Notifications."""
    list_display = ('recipient', 'message_summary', 'is_read', 'created_at')
    list_filter = ('is_read',)
    search_fields = ('recipient__username', 'message')

    def message_summary(self, obj):
        return obj.message[:50] + '...' if len(obj.message) > 50 else obj.message
    message_summary.short_description = 'Message'

# Register your models with the admin site
admin.site.register(PetReport, PetReportAdmin)
admin.site.register(PetForAdoption, PetForAdoptionAdmin)
admin.site.register(Profile, ProfileAdmin)
admin.site.register(Notification, NotificationAdmin)


================================================================================
File: .\users\apps.py
================================================================================

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'



================================================================================
File: .\users\decorators.py
================================================================================

# users/decorators.py
from django.contrib.auth.decorators import user_passes_test

def staff_required(view_func):
    """
    Decorator for views that checks that the user is logged in and is a staff member.
    """
    decorated_view = user_passes_test(
        lambda u: u.is_authenticated and u.is_staff,
        login_url='users:login', # Redirect to your login page if test fails
        redirect_field_name=None
    )
    return decorated_view(view_func)

def superuser_required(view_func):
    """
    Decorator for views that checks that the user is logged in and is a superuser.
    """
    decorated_view = user_passes_test(
        lambda u: u.is_authenticated and u.is_superuser,
        login_url='users:login', # Redirect to login if test fails
        redirect_field_name=None
    )
    return decorated_view(view_func)


================================================================================
File: .\users\models.py
================================================================================

from django.db import models
from django.contrib.auth.models import User

# This model extends Django's User to add the 'role' field.
class Profile(models.Model):
    ROLE_CHOICES = (('admin', 'Admin'), ('user', 'User'))
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    role = models.CharField(max_length=10, choices=ROLE_CHOICES, default='user')
    age = models.PositiveIntegerField(null=True, blank=True)
    city = models.CharField(max_length=100, null=True, blank=True)
    phone_number = models.CharField(max_length=20, null=True, blank=True)
    profile_picture = models.ImageField(default='profile_pics/default.png', upload_to='profile_pics/', null=True, blank=True)
    def __str__(self): return f"{self.user.username} Profile"

# This table handles both LOST and FOUND pet "incidents".
class PetReport(models.Model):
    REPORT_TYPE_CHOICES = (('Lost', 'Lost pet'), ('Found', 'Found pet'))
    STATUS_CHOICES = (('Open', 'Open'),('Pending Adoption', 'Pending Adoption'), ('Closed', 'Closed'))
    GENDER_CHOICES = (('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown')) # Add gender choices here

    report_type = models.CharField(max_length=20, choices=REPORT_TYPE_CHOICES)
    reporter = models.ForeignKey(User, on_delete=models.CASCADE, related_name='pet_reports')

    # NEW FIELDS ADDED:
    name = models.CharField(max_length=100, blank=True, null=True, help_text="Pet's name (if known)") # Optional name
    age = models.PositiveIntegerField(null=True, blank=True, help_text="Pet's age in years (if known)") # Optional age
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='Unknown', help_text="Pet's gender") # Gender field

    pet_type = models.CharField(max_length=50, help_text="e.g., Dog, Cat, Bird")
    breed = models.CharField(max_length=100, blank=True, null=True)
    color = models.CharField(max_length=50)
    pet_image = models.ImageField(upload_to='pet_images/')
    location = models.CharField(max_length=255, help_text="Area where the pet was lost or found.")
    contact_info = models.CharField(max_length=255, help_text="Your phone or email for contact.")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Open')
    date_reported = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        # Updated __str__ to include name if available
        pet_name = self.name if self.name else "Unnamed Pet"
        return f"{self.get_report_type_display()}: {pet_name} ({self.pet_type}) by {self.reporter.username}"

# This separate table is a catalog for pets available for ADOPTION.
class PetForAdoption(models.Model):
    GENDER_CHOICES = (('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown'))
    ADOPTION_STATUS_CHOICES = (('Available', 'Available'), ('Pending', 'Adoption Pending'), ('Adopted', 'Adopted'))
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField(help_text="Age in years.")
    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default='Unknown')
    pet_type = models.CharField(max_length=50)
    breed = models.CharField(max_length=100, blank=True, null=True)
    color = models.CharField(max_length=50)
    image = models.ImageField(upload_to='adoption_images/')
    description = models.TextField(help_text="Describe the pet's personality, story, and needs.")
    lister = models.ForeignKey(User, on_delete=models.CASCADE, related_name='adoption_listings')
    status = models.CharField(max_length=10, choices=ADOPTION_STATUS_CHOICES, default='Available')
    date_listed = models.DateTimeField(auto_now_add=True)
    def __str__(self): return f"{self.name} ({self.pet_type}) - {self.get_status_display()}"

# This table handles notifications from the system/admins to users.
class Notification(models.Model):
    recipient = models.ForeignKey(User, on_delete=models.CASCADE, related_name='notifications')
    pet_report = models.ForeignKey(PetReport, on_delete=models.CASCADE, null=True, blank=True)
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    def __str__(self): return f"Notification for {self.recipient.username}: {self.message[:30]}..."


================================================================================
File: .\users\serializers.py
================================================================================

from rest_framework import serializers
from .models import Profile, PetReport, PetForAdoption, Notification
from django.contrib.auth.models import User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'first_name', 'last_name', 'email']

class ProfileSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    class Meta:
        model = Profile
        fields = '__all__'

class PetReportSerializer(serializers.ModelSerializer):
    reporter = UserSerializer(read_only=True)
    class Meta:
        model = PetReport
        fields = '__all__'

class PetForAdoptionSerializer(serializers.ModelSerializer):
    class Meta:
        model = PetForAdoption
        fields = '__all__'

class NotificationSerializer(serializers.ModelSerializer):
    class Meta:
        model = Notification
        fields = '__all__'


================================================================================
File: .\users\tests.py
================================================================================




================================================================================
File: .\users\urls.py
================================================================================

# users/urls.py
from django.urls import path
from .views import (
   login_view, logout_view, register_view,
    pets_list_view, pet_detail_view, about_view, contact_view, dashboard_view, create_pet_report_view, # Make sure this is imported
    pet_report_detail_view, admin_dashboard_view,
    admin_manage_users_view,
    admin_promote_user_view,
    admin_remove_user_view,
    admin_adoption_processing_view,
    admin_put_for_adoption_view
)

app_name = 'users' 

urlpatterns = [
    # --- HTML Rendering URLs ---
    path('', login_view, name='login'), 
    path('logout/', logout_view, name='logout'),
    path('register/', register_view, name='register'),
    path('pets/', pets_list_view, name='pets_list'),
    path('pets/<int:pet_id>/', pet_detail_view, name='pet_detail'),
    path('about/', about_view, name='about'),
    path('contact/', contact_view, name='contact'),
    path('dashboard/', dashboard_view, name='dashboard'),
    path('report/pet/<str:report_type>/', create_pet_report_view, name='create_pet_report'),
    path('report/<int:report_id>/', pet_report_detail_view, name='pet_report_detail'), 
    path('admin_dashboard/', admin_dashboard_view, name='admin_dashboard'),
    path('admin_dashboard/users/', admin_manage_users_view, name='admin_manage_users'),
    path('admin_dashboard/users/promote/<int:user_id>/', admin_promote_user_view, name='admin_promote_user'),
    path('admin_dashboard/users/remove/<int:user_id>/', admin_remove_user_view, name='admin_remove_user'),
    path('admin_dashboard/process-adoption/', admin_adoption_processing_view, name='admin_adoption_processing'),
    path('admin_dashboard/process-adoption/<int:report_id>/', admin_put_for_adoption_view, name='admin_put_for_adoption'),
]




================================================================================
File: .\users\views.py
================================================================================

# users/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login as auth_login, logout as auth_logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django import forms
from django.urls import reverse
from django.contrib import messages
from .decorators import staff_required, superuser_required
from .models import Profile, PetReport, PetForAdoption, Notification
from .serializers import ProfileSerializer, PetReportSerializer, PetForAdoptionSerializer, NotificationSerializer, UserSerializer
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import viewsets, status
from rest_framework.permissions import AllowAny, IsAuthenticated, IsAdminUser

# --- API ViewSets ---
class ProfileViewSet(viewsets.ModelViewSet):
  queryset = Profile.objects.all()
  serializer_class = ProfileSerializer
  # permission_classes = [IsAuthenticated] # Uncomment if API access should be restricted

class PetReportViewSet(viewsets.ModelViewSet):
  queryset = PetReport.objects.all()
  serializer_class = PetReportSerializer
  # permission_classes = [IsAuthenticated]

class PetForAdoptionViewSet(viewsets.ModelViewSet):
  queryset = PetForAdoption.objects.all()
  serializer_class = PetForAdoptionSerializer
  # permission_classes = [IsAuthenticated]

class NotificationViewSet(viewsets.ModelViewSet):
  queryset = Notification.objects.all()
  serializer_class = NotificationSerializer
  # permission_classes = [IsAuthenticated]

# --- API View for Registration ---
class RegisterView(APIView):
  permission_classes = [AllowAny]
  def post(self, request):
    username = request.data.get('username')
    email = request.data.get('email')
    password = request.data.get('password')

    if not username or not password or not email:
      return Response({'error': 'Username, email, and password are required.'}, status=status.HTTP_400_BAD_REQUEST)
    if User.objects.filter(username=username).exists():
      return Response({'error': 'Username already exists.'}, status=status.HTTP_400_BAD_REQUEST)
    if User.objects.filter(email=email).exists():
      return Response({'error': 'Email already exists.'}, status=status.HTTP_400_BAD_REQUEST)

    user = User.objects.create_user(username=username, email=email, password=password)
    Profile.objects.create(user=user) # Creates profile with default values
    return Response(UserSerializer(user).data, status=status.HTTP_201_CREATED)


# --- HTML Rendering Views ---

# Login View
def login_view(request):
  if request.method == 'POST':
    form_username = request.POST.get('username')
    form_password = request.POST.get('password')

    user = authenticate(request, username=form_username, password=form_password)

    if user is not None:
      auth_login(request, user)
      messages.success(request, "Welcome back! You are logged in.")
      # Redirect to the dashboard after successful login
      return redirect('users:dashboard')
    else:
      # Authentication failed
      messages.error(request, "Invalid username or password. Please try again.")
      return render(request, 'users/login.html') # Re-render login page with error message
  else:
    # GET request: show the login form
    # If user is already authenticated, redirect them away from the login page.
    if request.user.is_authenticated:
      return redirect('users:dashboard') # Redirect logged-in users to dashboard
    return render(request, 'users/login.html')

# Logout View
def logout_view(request):
  auth_logout(request)
  messages.info(request, "You have been logged out.")
  return redirect('users:login') # Redirect to login after logout

# Registration Form
class RegistrationForm(forms.Form):
  username = forms.CharField(max_length=150, required=True, widget=forms.TextInput(attrs={'id': 'id_username', 'class': 'form-input'}))
  email = forms.EmailField(required=True, widget=forms.EmailInput(attrs={'id': 'id_email', 'class': 'form-input'}))
  first_name = forms.CharField(label="Full Name",max_length=100, required=False, widget=forms.TextInput(attrs={'id': 'id_first_name', 'class': 'form-input'}))
  age = forms.IntegerField(min_value=0, required=False, widget=forms.NumberInput(attrs={'id': 'id_age', 'class': 'form-input'}))
  city = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'id': 'id_city', 'class': 'form-input'}))
  phone_number = forms.CharField(max_length=20, required=False, widget=forms.TextInput(attrs={'id': 'id_phone_number', 'class': 'form-input'}))
  password = forms.CharField(widget=forms.PasswordInput(attrs={'id': 'id_password1', 'class': 'form-input'}))
  password2 = forms.CharField(widget=forms.PasswordInput(attrs={'id': 'id_password2', 'class': 'form-input'}), label="Confirm Password")
  is_admin_registration = forms.BooleanField(required=False, label="Register as Admin")
  admin_passcode = forms.CharField(
    widget=forms.PasswordInput,
    required=False,
    label="Admin Passcode"
  )

  # We need a custom validation method to check the passcode
  def clean(self):
    cleaned_data = super().clean()
    is_admin = cleaned_data.get('is_admin_registration')
    passcode = cleaned_data.get('admin_passcode')

    if is_admin:
      # If the admin box is checked, the passcode is required
      if not passcode:
        raise forms.ValidationError(
          "Admin passcode is required when registering as an admin."
        )

      # Check if the passcode is correct
      from django.conf import settings
      if passcode != settings.ADMIN_REGISTRATION_PASSCODE:
        raise forms.ValidationError("Invalid admin passcode.")

      # --- NEW LOGIC: CHECK ADMIN LIMIT ---
      # An "Admin" is a staff member who is NOT a superuser.
      current_admin_count = User.objects.filter(is_staff=True, is_superuser=False).count()

      # We allow a maximum of 3 admins.
      if current_admin_count >= 3:
        raise forms.ValidationError(
          "Cannot register as an admin at this time. The maximum number of admins (3) has been reached."
        )
      # ------------------------------------

    return cleaned_data

  def clean_password(self):
    password = self.cleaned_data.get("password")
    if password:
      if len(password) < 8: raise forms.ValidationError("Password must contain at least 8 characters.")
      if not any(c.islower() for c in password): raise forms.ValidationError("Password must contain at least one lowercase letter.")
      if not any(c.isupper() for c in password): raise forms.ValidationError("Password must contain at least one uppercase letter.")
      if not any(c.isdigit() for c in password): raise forms.ValidationError("Password must contain at least one number.")
      if not any(not c.isalnum() for c in password): raise forms.ValidationError("Password must contain at least one special character.")
    return password

  def clean_password2(self):
    password = self.cleaned_data.get("password")
    password2 = self.cleaned_data.get("password2")
    if password and password2 and password != password2:
      raise forms.ValidationError("Passwords do not match.")
    return password

  def clean_username(self):
    username = self.cleaned_data.get('username')
    if User.objects.filter(username=username).exists():
      raise forms.ValidationError("Username already exists.")
    return username

  def clean_email(self):
    email = self.cleaned_data.get('email')
    if User.objects.filter(email=email).exists():
      raise forms.ValidationError("Email already exists.")
    return email

# Registration View (Modified for correct form handling and redirection)
def register_view(request):
  if request.method == 'POST':
    form = RegistrationForm(request.POST)
    if form.is_valid():
      cleaned_data = form.cleaned_data
      is_admin = cleaned_data.get('is_admin_registration')

      # Step 1: Create the User
      user = User.objects.create_user(
        username=cleaned_data['username'],
        email=cleaned_data['email'],
        password=cleaned_data['password'],
        first_name=cleaned_data.get('first_name', '')
      )

      if is_admin:
        user.is_staff = True
        user.save()

      # Step 2: Explicitly create the Profile with all the form data
      # This is the crucial part that creates the row in the `users_profile` table.
      Profile.objects.create(
        user=user,
        role='admin' if is_admin else 'user',
        age=cleaned_data.get('age'),
        city=cleaned_data.get('city'),
        phone_number=cleaned_data.get('phone_number')
      )

      # Step 3: Log in and redirect
      auth_login(request, user)
      messages.success(request, "üéâ Registration successful! Welcome to PurPaws.")
      return redirect('users:dashboard')
  else:
    form = RegistrationForm()

  return render(request, 'users/register.html', {'form': form})

# Dashboard View
@login_required
def dashboard_view(request):
    # Fetch user's profile to display their info at the top.
    profile = None
    if hasattr(request.user, 'profile'):
        profile = request.user.profile

    # Fetch all open pet reports (both Lost and Found)
    open_reports = PetReport.objects.filter(status='Open').order_by('-date_reported')

    context = {
        'profile': profile,
        'open_reports': open_reports,
    }
    return render(request, 'users/dashboard.html', context)


# New View for Reporting Lost/Found Pet
# This view will handle both 'Lost' and 'Found' report types.
def create_pet_report_view(request, report_type):
  # Ensure user is logged in
  if not request.user.is_authenticated:
    messages.error(request, "You need to be logged in to report a pet.")
    return redirect('users:login')

  if request.method == 'POST':
    form = PetReportForm(request.POST, request.FILES) # Pass POST data and FILES
    if form.is_valid():

      # Get cleaned data, handling potential None for optional fields
      pet_name = form.cleaned_data.get('name')
      pet_age = form.cleaned_data.get('age')
      pet_gender = form.cleaned_data.get('gender') # This might be '' if not selected


      if not pet_gender: 
        pass # Let the model's default handle it if blank is submitted

      pet_report = PetReport.objects.create(
        report_type=report_type,
        reporter=request.user,
        name=pet_name, # This will be None if left blank, which is correct for optional
        age=pet_age,  # This will be None if left blank, which is correct for optional
        gender=pet_gender, # This is the key field to watch
        pet_type=form.cleaned_data['pet_type'],
        breed=form.cleaned_data.get('breed'),
        color=form.cleaned_data['color'],
        pet_image=form.cleaned_data['pet_image'],
        location=form.cleaned_data['location'],
        contact_info=form.cleaned_data['contact_info'],
        # status defaults to 'Open'
      )
      messages.success(request, f"Your '' pet report has been submitted successfully!")
      return redirect('users:dashboard')
    # If form is not valid, 'form' still holds the invalid data and errors.
  else:
    # GET request: Initialize an empty form
    form = PetReportForm()

  context = {
    'form': form,
    'report_type': report_type, # Pass to template for dynamic title/heading
  }
  return render(request, 'users/create_pet_report.html', context) # New template

# View to show a single pet report's details
@login_required # Protect this view
def pet_report_detail_view(request, report_id):
  try:
    report = PetReport.objects.get(pk=report_id)
    # Optional: Check if the logged-in user is the reporter of this report
    # if report.reporter != request.user:
    #   messages.error(request, "You do not have permission to view this report.")
    #   return redirect('users:dashboard')
  except PetReport.DoesNotExist:
    messages.error(request, "Report not found.")
    return redirect('users:dashboard')

  context = {
    'report': report
  }
  return render(request, 'users/pet_report_detail.html', context)

# --- Form for Reporting Lost/Found Pet ---
class PetReportForm(forms.Form):
  pet_type = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'placeholder': 'e.g., Dog, Cat, Bird'}))
  breed = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'placeholder': 'e.g., Labrador, Siamese'}))
  color = forms.CharField(max_length=50, required=True, widget=forms.TextInput(attrs={'placeholder': 'e.g., Brown, Black and White'}))
  pet_image = forms.ImageField(required=True)
  location = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'placeholder': 'Area where the pet was lost or found'}))
  contact_info = forms.CharField(max_length=255, required=True, widget=forms.TextInput(attrs={'placeholder': 'Your phone or email'}))
  name = forms.CharField(max_length=100, required=False, widget=forms.TextInput(attrs={'placeholder': "Pet's name (if known)"}))
  age = forms.IntegerField(min_value=0, required=False, widget=forms.NumberInput(attrs={'placeholder': "Pet's age in years (if known)"}))
  gender = forms.ChoiceField(choices=PetReport.GENDER_CHOICES, required=False, widget=forms.Select(attrs={'placeholder': "Select Gender"}))

# --- Placeholder views for About, Contact, etc. ---
def about_view(request):
  return render(request, 'users/about.html')

def contact_view(request):
  return render(request, 'users/contact.html')

def pets_list_view(request):
  all_pets = PetForAdoption.objects.filter(status='Available')
  context = {
    'pets': all_pets
  }
  return render(request, 'users/pets_list.html', context)

@login_required # Protect this view
def pet_detail_view(request, report_id):
  # ... (implementation for pet_report_detail_view) ...
  pass # Placeholder for now

@staff_required
def admin_adoption_processing_view(request):
  """
  Lists pets that are pending adoption and need admin action.
  """
  # Find all PetReports marked as 'Pending Adoption'
  pets_to_process = PetReport.objects.filter(status='Pending Adoption')

  context = {
    'pets_to_process': pets_to_process,
  }
  return render(request, 'admin/process_adoption.html', context)

# Form for putting a pet up for adoption
class PutForAdoptionForm(forms.ModelForm):
  # We can inherit from PetForAdoption and add fields
  class Meta:
    model = PetForAdoption
    fields = ['name', 'age', 'gender', 'description'] # Fields the admin will fill in
    widgets = {
      'description': forms.Textarea(attrs={'rows': 4}),
    }

@staff_required
def admin_put_for_adoption_view(request, report_id):
  """
  Handles the form for an admin to name a pet and put it up for adoption.
  """
  try:
    report = PetReport.objects.get(pk=report_id, status='Pending Adoption')
  except PetReport.DoesNotExist:
    messages.error(request, "This pet report was not found or is not pending adoption.")
    return redirect('users:admin_adoption_processing')

  if request.method == 'POST':
    form = PutForAdoptionForm(request.POST)
    if form.is_valid():
      # Create the new PetForAdoption record
      new_adoption_pet = form.save(commit=False) # Don't save to DB yet
      new_adoption_pet.pet_type = report.pet_type
      new_adoption_pet.breed = report.breed
      new_adoption_pet.color = report.color
      new_adoption_pet.image = report.pet_image # Directly assign the image file
      new_adoption_pet.lister = request.user # The admin is the lister
      new_adoption_pet.status = 'Available'
      new_adoption_pet.save()

      # Close the original report
      report.status = 'Closed'
      report.save()

      messages.success(request, f"Pet '{new_adoption_pet.name}' has been successfully listed for adoption!")
      return redirect('users:admin_adoption_processing')
  else:
    # Pre-populate the form with data from the report
    initial_data = {
      'name': report.name or '',
      'age': report.age or '',
      'gender': report.gender
    }
    form = PutForAdoptionForm(initial=initial_data)

  context = {
    'form': form,
    'report': report,
  }
  return render(request, 'admin/put_for_adoption_form.html', context)

@staff_required # Only staff (Admins and Superusers) can access this
def admin_dashboard_view(request):
  """
  Displays statistics for the admin dashboard.
  """
  user_count = User.objects.count()
  pets_for_adoption_count = PetForAdoption.objects.filter(status='Available').count()
  lost_reports_count = PetReport.objects.filter(report_type='Lost', status='Open').count()
  found_reports_count = PetReport.objects.filter(report_type='Found', status='Open').count()

  context = {
    'user_count': user_count,
    'pets_for_adoption_count': pets_for_adoption_count,
    'lost_reports_count': lost_reports_count,
    'found_reports_count': found_reports_count,
  }
  return render(request, 'admin/dashboard.html', context)


@staff_required # Only staff can manage users
def admin_manage_users_view(request):
  """
  Lists all non-superuser users for management.
  """
  # Exclude superusers so they cannot be managed from this interface
  users_to_manage = User.objects.filter(is_superuser=False).select_related('profile')

  context = {
    'users': users_to_manage,
  }
  return render(request, 'admin/manage_users.html', context)


@superuser_required # ONLY a superuser can promote another user to admin
def admin_promote_user_view(request, user_id):
  if request.method == 'POST':
    # --- NEW LOGIC: Check the current number of admins ---
    # An "Admin" is a staff member who is NOT a superuser.
    current_admin_count = User.objects.filter(is_staff=True, is_superuser=False).count()

    # We allow a maximum of 2 admins.
    if current_admin_count >= 3:
      messages.error(request, "Cannot promote user. The maximum number of 3 admins has been reached.")
      return redirect('users:admin_manage_users')
    # ---------------------------------------------------

    try:
      user_to_promote = User.objects.get(pk=user_id)

      if user_to_promote.is_superuser or user_to_promote.is_staff:
        messages.warning(request, "This user is already a superuser or admin.")
      else:
        # Promote the user
        user_to_promote.is_staff = True
        user_to_promote.save()

        user_to_promote.profile.role = 'admin'
        user_to_promote.profile.save()

        messages.success(request, f"User '{user_to_promote.username}' has been promoted to Admin.")

    except User.DoesNotExist:
      messages.error(request, "User not found.")

  return redirect('users:admin_manage_users')


@staff_required # Any staff member can attempt to remove a user
def admin_remove_user_view(request, user_id):
  if request.method == 'POST':
    try:
      user_to_remove = User.objects.get(pk=user_id)

      # Security check: Prevent non-superusers from removing admins.
      if user_to_remove.is_staff and not request.user.is_superuser:
        messages.error(request, "You do not have permission to remove an admin user.")
        return redirect('users:admin_manage_users')

      # Prevent anyone from removing a superuser via this view
      if user_to_remove.is_superuser:
        messages.error(request, "Superusers cannot be removed from this interface.")
        return redirect('users:admin_manage_users')

      username = user_to_remove.username
      user_to_remove.delete()
      messages.success(request, f"User '' has been removed successfully.")

    except User.DoesNotExist:
      messages.error(request, "User not found.")

  return redirect('users:admin_manage_users')


@staff_required
def admin_adoption_processing_view(request):
  """
  Lists pets that are pending adoption and need admin action.
  """
  pets_to_process = PetReport.objects.filter(status='Pending Adoption')
  context = {'pets_to_process': pets_to_process}
  return render(request, 'admin/process_adoption.html', context)


# Form for putting a pet up for adoption (can be defined here or with other forms)
class PutForAdoptionForm(forms.ModelForm):
  class Meta:
    model = PetForAdoption
    fields = ['name', 'age', 'gender', 'description']
    widgets = {
      'description': forms.Textarea(attrs={'rows': 4}),
    }
    labels = {
      'name': "Pet's New Name (for adoption listing)",
      'age': "Estimated Age",
      'description': "Adoption Profile Description",
    }


@staff_required
def admin_put_for_adoption_view(request, report_id):
  """
  Handles the form for an admin to name a pet and put it up for adoption.
  """
  try:
    report = PetReport.objects.get(pk=report_id, status='Pending Adoption')
  except PetReport.DoesNotExist:
    messages.error(request, "This pet report was not found or is not pending adoption.")
    return redirect('users:admin_adoption_processing')

  if request.method == 'POST':
    form = PutForAdoptionForm(request.POST)
    if form.is_valid():
      # Create the new PetForAdoption record
      new_adoption_pet = form.save(commit=False)
      new_adoption_pet.pet_type = report.pet_type
      new_adoption_pet.breed = report.breed
      new_adoption_pet.color = report.color
      new_adoption_pet.image = report.pet_image # Directly assign the image file
      new_adoption_pet.lister = request.user # The admin is the lister
      new_adoption_pet.status = 'Available'
      new_adoption_pet.save()

      # Close the original report
      report.status = 'Closed'
      report.save()

      messages.success(request, f"Pet '{new_adoption_pet.name}' has been successfully listed for adoption!")
      return redirect('users:admin_adoption_processing')
  else:
    # Pre-populate the form with data from the report for GET request
    initial_data = {
      'name': report.name if report.name else f"Friendly {report.pet_type}",
      'age': report.age or None,
      'gender': report.gender,
      'description': f"This lovely {report.pet_type} was found near {report.location}. We are looking for a forever home for them!"
    }
    form = PutForAdoptionForm(initial=initial_data)

  context = {
    'form': form,
    'report': report,
  }
  return render(request, 'admin/put_for_adoption_form.html', context)


================================================================================
File: .\users\__init__.py
================================================================================




================================================================================
File: .\users\management\commands\process_found_pets.py
================================================================================

# users/management/commands/process_found_pets.py
from django.core.management.base import BaseCommand
from django.utils import timezone
from users.models import PetReport, Notification, User
import datetime

class Command(BaseCommand):
    help = 'Flags unclaimed found pets older than 15 days and notifies admins.'

    def handle(self, *args, **options):
        self.stdout.write("Checking for found pets eligible for adoption...")

        # 1. Define the time threshold (15 days ago)
        fifteen_days_ago = timezone.now() - datetime.timedelta(days=15)

        # 2. Find all 'Found' pet reports that are still 'Open' and older than 15 days
        eligible_reports = PetReport.objects.filter(
            report_type='Found',
            status='Open',
            date_reported__lt=fifteen_days_ago
        )

        if not eligible_reports.exists():
            self.stdout.write(self.style.SUCCESS("No new pets are eligible for adoption today."))
            return

        # 3. Find all admin users to notify
        admin_users = User.objects.filter(is_staff=True)
        if not admin_users.exists():
            self.stdout.write(self.style.ERROR("No admin users found to notify."))
            return

        notification_count = 0
        # 4. For each eligible report, create a notification for each admin
        for report in eligible_reports:
            # Create a notification message
            message = (
                f"The found '{report.pet_type}' (Report ID: {report.id}) "
                f"reported on {report.date_reported.strftime('%Y-%m-%d')} is now eligible for adoption."
            )

            # Check if a similar notification already exists to avoid duplicates
            for admin in admin_users:
                if not Notification.objects.filter(recipient=admin, pet_report=report).exists():
                    Notification.objects.create(
                        recipient=admin,
                        pet_report=report, # Link the notification to the report
                        message=message
                    )
                    notification_count += 1

            # IMPORTANT: We change the status of the PetReport to 'Pending Adoption'
            # This prevents it from being picked up by this script again.
            report.status = 'Pending Adoption' # You'll need to add this to your STATUS_CHOICES
            report.save()

        self.stdout.write(self.style.SUCCESS(
            f"Created {notification_count} new notifications for {eligible_reports.count()} eligible pets."
        ))


================================================================================
File: .\users\migrations\0001_initial.py
================================================================================

# Generated by Django 4.2 on 2025-09-22 18:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion



class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('user', 'User')], default='user', max_length=10)),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.png', null=True, upload_to='profile_pics/')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PetReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('Lost', 'Lost pet'), ('Found', 'Found pet')], max_length=10)),
                ('pet_type', models.CharField(help_text='e.g., Dog, Cat, Bird', max_length=50)),
                ('breed', models.CharField(blank=True, max_length=100, null=True)),
                ('color', models.CharField(max_length=50)),
                ('pet_image', models.ImageField(upload_to='pet_images/')),
                ('location', models.CharField(help_text='Area where the pet was lost or found.', max_length=255)),
                ('contact_info', models.CharField(help_text='Your phone or email for contact.', max_length=255)),
                ('status', models.CharField(choices=[('Open', 'Open'), ('Closed', 'Closed')], default='Open', max_length=10)),
                ('date_reported', models.DateTimeField(auto_now_add=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pet_reports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PetForAdoption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('age', models.PositiveIntegerField(help_text='Age in years.')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown')], default='Unknown', max_length=10)),
                ('pet_type', models.CharField(max_length=50)),
                ('breed', models.CharField(blank=True, max_length=100, null=True)),
                ('color', models.CharField(max_length=50)),
                ('image', models.ImageField(upload_to='adoption_images/')),
                ('description', models.TextField(help_text="Describe the pet's personality, story, and needs.")),
                ('adoption_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=7)),
                ('status', models.CharField(choices=[('Available', 'Available'), ('Pending', 'Adoption Pending'), ('Adopted', 'Adopted')], default='Available', max_length=10)),
                ('date_listed', models.DateTimeField(auto_now_add=True)),
                ('lister', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='adoption_listings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



================================================================================
File: .\users\migrations\0002_remove_petforadoption_adoption_fee.py
================================================================================

# Generated by Django 4.2 on 2025-09-22 19:02

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='petforadoption',
            name='adoption_fee',
        ),
    ]



================================================================================
File: .\users\migrations\0003_notification.py
================================================================================

# Generated by Django 4.2 on 2025-09-22 19:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0002_remove_petforadoption_adoption_fee'),
    ]

    operations = [
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('pet_report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.petreport')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]



================================================================================
File: .\users\migrations\0004_profile_age_profile_city_profile_phone_number.py
================================================================================

# Generated by Django 4.2 on 2025-09-23 19:22

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0003_notification'),
    ]

    operations = [
        migrations.AddField(
            model_name='profile',
            name='age',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='city',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='phone_number',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
    ]



================================================================================
File: .\users\migrations\0005_petreport_age_petreport_gender_petreport_name.py
================================================================================

# Generated by Django 4.2 on 2025-09-27 10:52

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0004_profile_age_profile_city_profile_phone_number'),
    ]

    operations = [
        migrations.AddField(
            model_name='petreport',
            name='age',
            field=models.PositiveIntegerField(blank=True, help_text="Pet's age in years (if known)", null=True),
        ),
        migrations.AddField(
            model_name='petreport',
            name='gender',
            field=models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Unknown', 'Unknown')], default='Unknown', help_text="Pet's gender", max_length=10),
        ),
        migrations.AddField(
            model_name='petreport',
            name='name',
            field=models.CharField(blank=True, help_text="Pet's name (if known)", max_length=100, null=True),
        ),
    ]



================================================================================
File: .\users\migrations\0006_alter_petreport_report_type_alter_petreport_status.py
================================================================================

# Generated by Django 4.2 on 2025-09-27 18:33

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0005_petreport_age_petreport_gender_petreport_name'),
    ]

    operations = [
        migrations.AlterField(
            model_name='petreport',
            name='report_type',
            field=models.CharField(choices=[('Lost', 'Lost pet'), ('Found', 'Found pet')], max_length=20),
        ),
        migrations.AlterField(
            model_name='petreport',
            name='status',
            field=models.CharField(choices=[('Open', 'Open'), ('Pending Adoption', 'Pending Adoption'), ('Closed', 'Closed')], default='Open', max_length=20),
        ),
    ]



================================================================================
File: .\users\migrations\__init__.py
================================================================================




================================================================================
File: .\users\templates\admin\dashboard.html
================================================================================

{# users/templates/admin/dashboard.html #}
{% extends 'users/base.html' %}
{% load static %}

{% block title %}Admin Dashboard{% endblock %}

{% block content %}
<section class="admin-dashboard-section">
    <h2 class="section-title">Admin Dashboard</h2>
    <p class="auth-subtitle">Welcome, {{ request.user.username }}! Here's a summary of the platform.</p>
        
    <div class="stats-grid">
        <div class="stat-card">
            <h3>Total Users</h3>
            <p>{{ user_count }}</p>
        </div>
        <div class="stat-card">
            <h3>Pets for Adoption</h3>
            <p>{{ pets_for_adoption_count }}</p>
        </div>
        <div class="stat-card">
            <h3>Open Lost Reports</h3>
            <p>{{ lost_reports_count }}</p>
        </div>
        <div class="stat-card">
            <h3>Open Found Reports</h3>
            <p>{{ found_reports_count }}</p>
        </div>
    </div>

    <div class="admin-actions">
        <h3>Management Tools</h3>
        <div class="action-buttons">
            <a href="{% url 'users:admin_manage_users' %}" class="btn btn-primary">Manage Users</a>
            <a href="{% url 'users:admin_adoption_processing' %}" class="btn btn-primary">Process Pending Adoptions</a>
            {# You can add more admin action buttons here as you build more features #}
        </div>
    </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\admin\manage_users.html
================================================================================

{# users/templates/admin/manage_users.html #}
{% extends 'users/base.html' %}
{% load static %}

{% block title %}Manage Users{% endblock %}

{% block content %}
<section class="manage-users-section">
    <h2 class="section-title">Manage Users</h2>
    <div class="admin-nav">
        <a href="{% url 'users:admin_dashboard' %}">&larr; Back to Admin Dashboard</a>
    </div>

    <div class="user-table-container">
        <table>
            <thead>
                <tr>
                    <th>Username</th>
                    <th>Full Name</th>
                    <th>Email</th>
                    <th>Profile Role</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for user_obj in users %}
                <tr>
                    <td>{{ user_obj.username }}</td>
                    <td>{{ user_obj.get_full_name|default:"N/A" }}</td>
                    <td>{{ user_obj.email }}</td>
                    <td>
                        {% if user_obj.profile.role == 'admin' %}
                            <span class="role-admin">Admin</span>
                        {% else %}
                            <span class="role-user">User</span>
                        {% endif %}
                    </td>
                    <td class="action-cell">
                        {# Promote Button - Only visible to Superusers #}
                        {% if request.user.is_superuser and user_obj.profile.role != 'admin' %}
                            <form action="{% url 'users:admin_promote_user' user_obj.id %}" method="post" class="action-form">
                                {% csrf_token %}
                                <button type="submit" class="btn-promote">Promote to Admin</button>
                            </form>
                        {% endif %}

                        {# Remove Button - Visible to all staff, but view has logic to block misuse #}
                        <form action="{% url 'users:admin_remove_user' user_obj.id %}" method="post" onsubmit="return confirm('Are you sure you want to remove this user? This action cannot be undone.');" class="action-form">
                            {% csrf_token %}
                            <button type="submit" class="btn-danger">Remove</button>
                        </form>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="5">No non-superuser accounts found.</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\admin\process_adoption.html
================================================================================

{# users/templates/admin/process_adoption.html #}
{% extends 'users/base.html' %}
{% load static %}
{% block title %}Process Pending Adoptions{% endblock %}

{% block content %}
<section class="manage-users-section"> {# Reusing some styles #}
    <h2 class="section-title">Pets Pending Adoption</h2>
    <p class="auth-subtitle">These pets were reported as "Found" more than 15 days ago and are now eligible to be listed for adoption.</p>
    <div class="admin-nav">
        <a href="{% url 'users:admin_dashboard' %}">&larr; Back to Admin Dashboard</a>
    </div>

    <div class="user-table-container">
        <table>
            <thead>
                <tr>
                    <th>Report ID</th>
                    <th>Pet Type</th>
                    <th>Reported On</th>
                    <th>Location</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for report in pets_to_process %}
                <tr>
                    <td>{{ report.id }}</td>
                    <td>{{ report.pet_type }}</td>
                    <td>{{ report.date_reported|date:"Y-m-d" }}</td>
                    <td>{{ report.location }}</td>
                    <td>
                        <a href="{% url 'users:admin_put_for_adoption' report.id %}" class="btn btn-small btn-primary">Process</a>
                    </td>
                </tr>
                {% empty %}
                <tr>
                    <td colspan="5">There are no pets pending adoption at this time.</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\admin\put_for_doption_from.html
================================================================================

{# users/templates/admin/put_for_adoption_form.html #}
{% extends 'users/base.html' %}
{% load static %}
{% block title %}List Pet for Adoption{% endblock %}

{% block content %}
<section class="report-section">
    <div class="auth-box">
        <h2 class="auth-title">List Pet for Adoption</h2>
        <p class="auth-subtitle">Finalize details for Found Pet Report #{{ report.id }}</p>

        <div class="original-report-info">
            <h4>Original Report Details</h4>
            {% if report.pet_image %}
            <img src="{{ report.pet_image.url }}" alt="Original pet image" style="max-width: 150px; border-radius: 8px; margin-bottom: 15px;">
            {% endif %}
            <p><strong>Type:</strong> {{ report.pet_type }}, <strong>Color:</strong> {{ report.color }}</p>
            <p><strong>Found At:</strong> {{ report.location }}</p>
        </div>

        <form method="post" action="">
            {% csrf_token %}
            
            {# Rendering the form fields manually for better control #}
            <div class="form-group">
                <label for="{{ form.name.id_for_label }}">Pet's New Name:</label>
                {{ form.name }}
            </div>
            <div class="form-group">
                <label for="{{ form.age.id_for_label }}">Estimated Age:</label>
                {{ form.age }}
            </div>
            <div class="form-group">
                <label for="{{ form.gender.id_for_label }}">Gender:</label>
                {{ form.gender }}
            </div>
            <div class="form-group">
                <label for="{{ form.description.id_for_label }}">Description for Adoption Page:</label>
                {{ form.description }}
            </div>

            {% if form.errors %}
                <div class="alert alert-danger">
                    {{ form.errors }}
                </div>
            {% endif %}

            <button type="submit" class="btn btn-primary btn-full">List for Adoption</button>
        </form>
    </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\users\about.html
================================================================================

{# users/templates/users/about.html #}
{% extends 'users/base.html' %}
{% load static %}

{% block title %}About PurPaws{% endblock %}

{% block content %}
<section class="about-hero-section">
    <div class="container">
        <h1>Our Story</h1>
        <p>Connecting Paws with Hearts, One Home at a Time</p>
        <p>It‚Äôs your purpaws to give every paw a chance at love.</p>
    </div>
</section>

<section class="about-content-section container">
    
    <div class="about-mission">
        <div class="about-text">
            <h2>Our Mission</h2>
            <p>At PurPaws, our mission is simple: to create a world where every pet has a safe, loving, and permanent home. We believe that the bond between a pet and a person is a special one, and we are dedicated to facilitating that connection. We built this platform to bridge the gap between lost pets and their worried owners, and to give unclaimed animals a second chance at a happy life through adoption.</p>
        </div>
        <div class="about-image">
            <img src="{% static 'images/about-mission.jpg' %}" alt="A happy dog being petted by its owner">
        </div>
    </div>

    <div class="how-it-works">
        <h2 class="section-title">How PurPaws Works</h2>
        <div class="steps-container">
            <div class="step-card">
                <div class="step-icon">üêæ</div>
                <h3>1. Report a Pet</h3>
                <p>If you've lost a beloved pet or found a stray, you can create a report in seconds. Provide details and photos to help increase the chances of a happy reunion.</p>
            </div>
            <div class="step-card">
                <div class="step-icon">‚ù§Ô∏è</div>
                <h3>2. Community Network</h3>
                <p>Our platform acts as a digital neighborhood watch, connecting people in the same area. Users can view lost and found reports to help identify and locate pets.</p>
            </div>
            <div class="step-card">
                <div class="step-icon">üè†</div>
                <h3>3. A Second Chance</h3>
                <p>Found pets that remain unclaimed after a certain period are given a new opportunity. Our dedicated admins review their cases and list them for adoption, ensuring they can find a new forever home.</p>
            </div>
        </div>
    </div>

    <div class="call-to-action">
        <h2>Join Our Community Today</h2>
        <p>Whether you're looking to adopt, have lost a pet, or just want to help, your participation makes a difference.</p>
        <a href="{% url 'users:register' %}" class="btn btn-primary">Get Started</a>
    </div>

</section>
{% endblock %}


================================================================================
File: .\users\templates\users\base.html
================================================================================

{# users/templates/users/base.html #}
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{% block title %}PurPaws - Find Your Furry Friend!{% endblock %}</title>
  <link rel="stylesheet" href="{% static 'css/style.css' %}">
  <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Quicksand:wght@400;700&display=swap" rel="stylesheet">
</head>
<body class="{% block body_class %}{% endblock %}">
  <header class="site-header">
    <div class="container">
      <a href="{% url 'users:login' %}" class="logo">
      <img src="{% static 'images/fulllogo.png' %}" alt="PurPaws Logo" class="logo-full-img">
      </a>
      <nav>
        <ul>
          {# --- Conditional Navigation Links --- #}
          {% if user.is_authenticated %}
            {# Links for ALL logged-in users #}
            <li><a href="{% url 'users:dashboard' %}">My Dashboard</a></li>
            <li><a href="{% url 'users:pets_list' %}">Pets for Adoption</a></li>

            {# --- ADMIN-ONLY LINK --- #}
            {% if user.is_staff %}
              <li><a href="{% url 'users:admin_dashboard' %}" class="admin-link">Admin Panel</a></li>
            {% endif %}
            {# ------------------------- #}

            <li><a href="{% url 'users:logout' %}">Logout</a></li>
          {% else %}
            {# Links for logged-out users #}
            <li><a href="{% url 'users:register' %}">Register</a></li>
            <li><a href="{% url 'users:login' %}">Login</a></li>
          {% endif %}

          {# Links available to everyone #}
          <li><a href="{% url 'users:about' %}">About</a></li>
        </ul>
      </nav>
    </div>
  </header>

  <main class="container">
    {% if messages %}
      <ul class="messages">
        {% for message in messages %}
          <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
        {% endfor %}
      </ul>
    {% endif %}
    {% block content %}
    {% endblock %}
  </main>

  <footer class="site-footer">
    <div class="container">
      <p>Every paw has a purpose.</p>
    </div>
  </footer>

  <script src="{% static 'js/script.js' %}"></script>
  {% block scripts %}
  {% endblock %}
</body>
</html>


================================================================================
File: .\users\templates\users\create_pet_report.html
================================================================================

{# users/templates/users/create_pet_report.html #}
{% extends 'users/base.html' %}
{% load static %}

{% block title %}{{ report_type }} Pet Report{% endblock %}

{% block content %}
<section class="report-section">
    <div class="auth-box"> {# Reusing auth-box for form styling #}
        <h2 class="auth-title">{{ report_type }} Pet Report</h2>
        <p class="auth-subtitle">Help us reunite pets with their families!</p>

        {# IMPORTANT: enctype="multipart/form-data" is crucial for file uploads #}
        <form id="petReportForm" method="post" enctype="multipart/form-data" action="">
            {% csrf_token %}

            {# Display form errors #}
            {% if form.errors %}
                <div class="alert alert-danger">
                    {% for field in form %}
                        {% for error in field.errors %}
                            <p><strong>{{ field.label }}:</strong> {{ error }}</p>
                        {% endfor %}
                    {% endfor %}
                    {% for error in form.non_field_errors %}
                        <p><strong>Error:</strong> {{ error }}</p>
                    {% endfor %}
                </div>
            {% endif %}

            {# Form fields - NEW FIELDS ADDED #}
            <div class="form-group">
                <label for="id_name">Pet's Name (Optional):</label>
                <input type="text" id="id_name" name="name" value="{{ form.name.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_age">Age (Optional):</label>
                <input type="number" id="id_age" name="age" min="0" value="{{ form.age.value|default:'' }}">
            </div>
           <div class="form-group">
                <label for="id_gender">Gender:</label>
                <select id="id_gender" name="gender">
                    {# --- MODIFIED GENDER SELECT LOGIC --- #}
                    {# Add a default option that represents 'empty' or 'unknown' #}
                    {# If the field has no value OR the value is empty string, select this option #}
                    <option value="" {% if not form.gender.value %}selected{% endif %}>Select Gender</option>
                    {% for value, display in form.gender.field.choices %}
                        {# If the form value matches the option value, mark it as selected #}
                        {# Ensure we compare against the actual value Django provides #}
                        <option value="{{ value }}" {% if form.gender.value|stringformat:"s" == value|stringformat:"s" %}selected{% endif %}>{{ display }}</option>
                    {% endfor %}
                </select>
            </div>


            {# Existing Fields #}
            <div class="form-group">
                <label for="id_pet_type">Pet Type:</label>
                <input type="text" id="id_pet_type" name="pet_type" value="{{ form.pet_type.value|default:'' }}" required>
            </div>
            <div class="form-group">
                <label for="id_breed">Breed (Optional):</label>
                <input type="text" id="id_breed" name="breed" value="{{ form.breed.value|default:'' }}">
            </div>
            <div class="form-group">
                <label for="id_color">Color:</label>
                <input type="text" id="id_color" name="color" value="{{ form.color.value|default:'' }}" required>
            </div>
            <div class="form-group">
                <label for="id_pet_image">Pet Image:</label>
                <input type="file" id="id_pet_image" name="pet_image" accept="image/*" required>
            </div>
            <div class="form-group">
                <label for="id_location">Location:</label>
                <input type="text" id="id_location" name="location" value="{{ form.location.value|default:'' }}" required>
                <small>e.g., "Central Park, NYC" or "Near Main Street and Elm Avenue"</small>
            </div>
            <div class="form-group">
                <label for="id_contact_info">Contact Info:</label>
                <input type="text" id="id_contact_info" name="contact_info" value="{{ form.contact_info.value|default:'' }}" required>
                <small>Your phone number or email address</small>
            </div>

            <button type="submit" class="btn btn-primary btn-full">Submit Report</button>
        </form>
    </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\users\dashboard.html
================================================================================

{# users/templates/users/dashboard.html #}
{% extends 'users/base.html' %}
{% load static %}

{% block title %}Dashboard{% endblock %}

{% block content %}
<section class="dashboard-section">
    <h2 class="section-title">Welcome, {{ user.get_full_name|default:user.username }}!</h2>

  {% comment %}
    {# Display User Information - Keep this for context #}
    {% if profile %}
        <div class="user-info-box">
            <h3>Your Account Details</h3>
            <p><strong>Username:</strong> {{ user.username }}</p>
            <p><strong>Full Name:</strong> {{ profile.user.get_full_name|default:"Not provided" }}</p>
            <p><strong>Email:</strong> {{ user.email }}</p>
            <p><strong>Age:</strong> {{ profile.age|default:"Not provided" }}</p>
            <p><strong>City:</strong> {{ profile.city|default:"Not provided" }}</p>
            <p><strong>Phone Number:</strong> {{ profile.phone_number|default:"Not provided" }}</p>
            <p><strong>Role:</strong> {{ profile.role|default:"User" }}</p>
            {% if profile.profile_picture %}
                <img src="{{ profile.profile_picture.url }}" alt="Profile Picture" class="profile-pic-large">
            {% else %}
                <img src="{% static 'images/default-profile.png' %}" alt="Default Profile Picture" class="profile-pic-large">
            {% endif %}
        </div>
    {% else %}
        <p></p>
    {% endif %}
{% endcomment %}

    {# Action Buttons - Links updated #}
    <div class="dashboard-actions">
        <h2>What would you like to do?</h2>
        <div class="action-buttons">
            {# These buttons now correctly link to the report URLs #}
            <a href="{% url 'users:create_pet_report' 'Lost' %}" class="btn btn-primary">Report a Lost Pet</a>
            <a href="{% url 'users:create_pet_report' 'Found' %}" class="btn btn-primary">Report a Found Pet</a>
            <a href="{% url 'users:pets_list' %}" class="btn btn-primary">View Pets for Adoption</a>
        </div>
    </div>

    {# Display Found Pets Available for Adoption --- This is the new part #}
    {# Note: This section will show ALL available pets, not specifically 'found but no match for 15 days' yet #}
    {# Display Open Lost and Found Reports #}
  {% if open_reports %}
    <section class="dashboard-pets-section">
      <h3 class="section-title">Open Lost & Found Reports</h3>
      <div class="pet-grid">
        {% for report in open_reports %}
          <div class="pet-card">
            {# Add a visual indicator for Lost vs. Found #}
            <div class="report-type-badge {{ report.report_type|lower }}">{{ report.report_type }}</div>
            
            <img src="{{ report.pet_image.url }}" alt="{{ report.pet_type }}" class="pet-card-img">
            <div class="pet-card-info">
              {# Use pet's name if available, otherwise the pet type #}
              <h3>{{ report.name|default:report.pet_type }}</h3>
              <p><strong>Breed:</strong> {{ report.breed|default:"N/A" }}</p>
              <p><strong>Location:</strong> {{ report.location }}</p>
              <p><strong>Reported:</strong> {{ report.date_reported|date:"M d, Y" }}</p>
              {# The link should go to the report detail page #}
              <a href="{% url 'users:pet_report_detail' report.id %}" class="btn btn-small btn-secondary">View Report</a>
            </div>
          </div>
        {% endfor %}
      </div>
    </section>
  {% else %}
    <p class="no-pets-message" style="text-align: center; margin-top: 20px; font-size: 1.1em;">There are no open lost or found reports at this time.</p>
  {% endif %}

    {# User's Reports (Optional: for dashboard) #}
    {% if reports %}
        <div class="user-reports-box">
            <h3>Your Pet Reports</h3>
            <ul>
            {% for report in reports %}
                <li>
                    <strong>{{ report.get_report_type_display }}</strong>: {{ report.pet_type }} in {{ report.location }} (Status: {{ report.status }})
                    - <a href="{% url 'users:pet_report_detail' report.id %}">View</a>
                </li>
            {% endfor %}
            </ul>
        </div>
    {% endif %}

</section>
{% endblock %}

{% block scripts %}
{# Add any dashboard-specific JS here #}
{% endblock %}


================================================================================
File: .\users\templates\users\home.html
================================================================================

{% extends 'users/base.html' %}
{% load static %}

{% block title %}Welcome to PurPaws!{% endblock %}

{% block content %}
<section class="hero-section">
    <div class="hero-content">
        <h2>Find your perfect furry companion!</h2>
        <p>Connecting loving homes with adorable pets in need.</p>
        <div class="hero-actions">
            <a href="{% url 'users:pets_list' %}" class="btn btn-primary">Discover Pets</a> {# Corrected namespace #}
            <a href="{% url 'users:register' %}" class="btn btn-secondary">Join Our Community</a> {# Corrected namespace #}
        </div>
    </div>
    <div class="hero-image">
        <img src="{% static 'images/hero-pet.jpg' %}" alt="Cute Dog and Cat">
    </div>
</section>

<section class="featured-pets-section">
    <h2 class="section-title">Featured Pets Ready for Adoption</h2>
    <div class="pet-grid">
        {% for pet in featured_pets %}
            <div class="pet-card">
                {# Ensure the image URL is correctly accessed. Assuming `pet.image` is the ImageField #}
                <img src="{{ pet.image.url }}" alt="{{ pet.name }}" class="pet-card-img">
                <div class="pet-card-info">
                    <h3>{{ pet.name }}</h3>
                    <p><strong>Type:</strong> {{ pet.pet_type }}</p>
                    <p><strong>Breed:</strong> {{ pet.breed|default:"N/A" }}</p> {# Added default for clarity #}
                    <p><strong>Age:</strong> {{ pet.age }} years</p>
                    <a href="{% url 'users:pet_detail' pet.id %}" class="btn btn-small">View Details</a> {# Corrected namespace and added pet.id #}
                </div>
            </div>
        {% empty %}
            <p>No pets available for adoption right now. Check back soon!</p>
        {% endfor %}
    </div>
</section>

<section class="about-purpaws-section">
    <h2 class="section-title">About PurPaws</h2>
    <div class="about-content">
        <img src="{% static 'images/paw-print-icon.png' %}" alt="Paw Print Icon" class="about-icon">
        <p>PurPaws is dedicated to making adoption easier and more accessible for everyone. We believe every pet deserves a loving home, and we're here to help you find your perfect match.</p>
    </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\users\login.html
================================================================================

{% extends 'users/base.html' %}
{% load static %}

{% block title %}Login to PurPaws{% endblock %}
{% block body_class %}login-page-background{% endblock %}
{% block content %}
<section class="auth-section">
  <div class="auth-box">
    {# Add the .cursive-title class to make this specific h2 tag use the Pacifico font #}
    <h2 class="auth-title cursive-title">Hello!</h2>
    {% if messages %}
 <div class="flash-messages">
  {% for message in messages %}
   <div class="alert {{ message.tags }}">
    {{ message }}
   </div>
  {% endfor %}
 </div>
{% endif %}
    <p class="auth-subtitle">Login to your PurPaws account.</p>

    {# Action correctly points to the login URL #}
    <form method="post" action="{% url 'users:login' %}"> {# Corrected namespace #}
      {% csrf_token %}

      {% if error_message %}
        <div class="alert alert-danger">
          <p>{{ error_message }}</p>
        </div>
      {% endif %}

      <div class="form-group">
        <label for="username">Username or Email:</label>
        <input type="text" id="username" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
      </div>

      <button type="submit" class="btn btn-primary btn-full">Login</button>
    </form>

    <div class="auth-switch">
      <p>New user? <a href="{% url 'users:register' %}">Register Here</a></p> {# Corrected namespace #}
    </div>
  </div>
</section>
{% endblock %}


================================================================================
File: .\users\templates\users\pet_report_detail.html
================================================================================

{# users/templates/users/pet_report_detail.html #}
{% extends 'users/base.html' %}
{% load static %}

{% block title %}Report Detail{% endblock %}

{% block content %}
<section class="report-detail-section">
    <div class="report-detail-container">
        <h2 class="section-title">{{ report.get_report_type_display }} Report</h2>

        <div class="report-header">
            <p><strong>Reported by:</strong> {{ report.reporter.get_full_name|default:report.reporter.username }}</p>
            <p><strong>Reported on:</strong> {{ report.date_reported|date:"F d, Y H:i" }}</p>
            <p><strong>Status:</strong> {{ report.get_status_display }}</p>
        </div>

        {% if report.pet_image %}
            <div class="report-image-large">
                <img src="{{ report.pet_image.url }}" alt="Pet Image">
            </div>
        {% endif %}

        <div class="report-details">
            <p><strong>Pet Type:</strong> {{ report.pet_type }}</p>
            <p><strong>Breed:</strong> {{ report.breed|default:"N/A" }}</p>
            <p><strong>Color:</strong> {{ report.color }}</p>
            <p><strong>Location:</strong> {{ report.location }}</p>
            <p><strong>Contact Info:</strong> {{ report.contact_info }}</p>
        </div>

        {# Add a button for expressing interest or matching later #}
        {# <a href="#" class="btn btn-primary">Express Interest</a> #}
    </div>
</section>
{% endblock %}

{% block scripts %}
{# Add any pet detail specific JS here #}
{% endblock %}


================================================================================
File: .\users\templates\users\register.html
================================================================================

{# users/templates/users/register.html #}
{% extends 'users/base.html' %}
{% load static %}

{% block title %}Register with PurPaws{% endblock %}

{% block body_class %}register-page-background{% endblock %}

{% block content %}
<section class="auth-section">
  <div class="auth-box">
    <h2 class="auth-title">Create Your Account</h2>
    <p class="auth-subtitle">Join our community to help pets find homes!</p>

    <form id="registrationForm" method="post" action="{% url 'users:register' %}">
      {% csrf_token %}

            <!-- ================= ERROR DISPLAY BLOCK ================= -->
      {% if form.errors %}
        <div class="alert alert-danger">
          <p><strong>Please correct the errors below:</strong></p>
          <ul>
          {% for field in form %}
            {% for error in field.errors %}
              <li>{{ field.label }}: {{ error }}</li>
            {% endfor %}
          {% endfor %}
          {# This shows errors not tied to a specific field, like passcode mismatch #}
          {% for error in form.non_field_errors %}
            <li>{{ error }}</li>
          {% endfor %}
          </ul>
        </div>
      {% endif %}
      <!-- ======================================================== -->

      <!-- --- ALL FORM FIELDS GO HERE --- -->
      <div class="form-group">
        {{ form.username.label_tag }}
        {{ form.username }}
      </div>

      <div class="form-group">
        {{ form.email.label_tag }}
        {{ form.email }}
      </div>

      <div class="form-group">
        {{ form.first_name.label_tag }}
        {{ form.first_name }}
      </div>

      <div class="form-group">
        {{ form.age.label_tag }} 
        {{ form.age }}
      </div>

      <div class="form-group">
        {{ form.city.label_tag }} 
        {{ form.city }}
      </div>

      <div class="form-group">
        {{ form.phone_number.label_tag }} 
        {{ form.phone_number }}
      </div>

      <div class="form-group">
        {{ form.password.label_tag }}
        {{ form.password }}
        <small class="password-rules">Min 8 chars, 1 uppercase, 1 lowercase, 1 number, 1 special char.</small>
      </div>

      <div class="form-group">
        {{ form.password2.label_tag }}
        {{ form.password2 }}
      </div>
      <!-- ----------------------------------- -->

      <!-- --- Fields for Admin Registration --- -->
      <div class="form-group admin-toggle">
        <label for="{{ form.is_admin_registration.id_for_label }}">
          {{ form.is_admin_registration }}
          {{ form.is_admin_registration.label }}
        </label>
      </div>

      <div class="form-group" id="admin_passcode_group" style="display: none;">
        {{ form.admin_passcode.label_tag }}
        {{ form.admin_passcode }}
      </div>
      <!-- ----------------------------------- -->

      <button type="submit" class="btn btn-primary btn-full">Register</button>
    </form>

    <div class="auth-switch">
      <p>Already have an account? <a href="{% url 'users:login' %}" class="btn btn-secondary btn-small">Login Here</a></p>
    </div>
  </div>
</section>

{% endblock %}


{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  const adminCheckbox = document.getElementById('{{ form.is_admin_registration.id_for_label }}');
  const passcodeGroup = document.getElementById('admin_passcode_group');

  // Function to toggle display
  function togglePasscodeField() {
    if (adminCheckbox && passcodeGroup) { // Check if elements exist
      if (adminCheckbox.checked) {
        passcodeGroup.style.display = 'block';
      } else {
        passcodeGroup.style.display = 'none';
      }
    }
  }

  // Initial check in case the form is re-rendered with the box already checked
  togglePasscodeField();

  // Add event listener if checkbox exists
  if (adminCheckbox) {
    adminCheckbox.addEventListener('change', togglePasscodeField);
  }
});
</script>
{% endblock %}

